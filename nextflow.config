/*
 * -------------------------------------------------
 *  lifebit-ai/metagwas Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Define image used by pipeline

docker.enabled = true
process.container = 'lifebitai/metal:latest'

// Global default params, used in configs
params {

  // 1 - Workflow flags

  study_1 = false
  study_2 = false
  outdir = './results'

  // 2 - METAL OPTIONS

  // WARNINGS: 
  // - Options that indirectly interfere with the pipeline design are not made available.
  // For example: the option SEPARATOR is not made available, as it would interfere with the input datasets
  // are being manipulated by the pipeline.

  // 1 - METAL options for describing input files
  
  flip       = false

  // 2 - METAL options for filtering input files
  
  addfilter  = false
  removefilters = false

  // 3 - METAL options for sample size weighted meta-analysis
  
  weightlabel = false
  defaultweight = false
  minweight = false

  // 4 - METAL options for inverse variance weighted meta-analysis

  stderrlabel = false
  scheme = false

  // 5 - METAL options to enable tracking of allele frequencies

  averagefreq = false
  minmaxfreq  = false
  freqlabel = false

  // 6 - METAL options to enable tracking of user defined variables

  customvariable = false
  label = false

  // 7 - METAL options to enable explicit strand information

  usestrand = false
  strandlabel = false

  // 8 - METAL options for automatic genomic control correction of input statistics

  genomiccontrol = false

  // 9 - METAL options for general analysis control  

  outfile = false
  maxwarnings = false
  verbose = false
  logpvalue = false

  // 10 - METAL options for general run controlnot available (pipeline is not currently developed to handle this)

  // 3 - Boilerplate options

  name = false
  multiqc_config = false
  email = false
  email_on_fail = false
  max_multiqc_email_size = 25.MB
  plaintext_email = false
  monochrome_logs = false
  help = false
  igenomes_base = 's3://ngi-igenomes/igenomes/'
  tracedir = "${params.outdir}/pipeline_info"
  igenomes_ignore = false
  custom_config_version = 'master'
  custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  hostnames = false
  config_profile_description = false
  config_profile_contact = false
  config_profile_url = false

  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load igenomes.config if required
if (!params.igenomes_ignore) {
  includeConfig 'conf/igenomes.config'
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
  R_PROFILE_USER = "/.Rprofile"
  R_ENVIRON_USER = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name = 'lifebit-ai/metagwas'
  author = 'Magda Meier'
  homePage = 'https://github.com/lifebit-ai/metagwas'
  description = 'A pipeline performing meta-analysis of GWAS studies'
  mainScript = 'main.nf'
  nextflowVersion = '>=19.10.0'
  version = '1.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
